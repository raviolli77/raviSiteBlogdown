<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on DataTq4</title>
    <link>https://rauleulogio.com/tags/python/</link>
    <description>Recent content in Python on DataTq4</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://rauleulogio.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Benchmarking Code in Python</title>
      <link>https://rauleulogio.com/2018/07/09/benchmarking-code-in-python/</link>
      <pubDate>Mon, 09 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://rauleulogio.com/2018/07/09/benchmarking-code-in-python/</guid>
      <description>When I first started programming I started to get the hang of for-loops and I basically applied them to everything that was iterable. Upon learning more about efficient coding for data science, I learned about vectorization (mostly through R and pySpark), so I wanted to showcase a simple case study as to when vectorization reigns supreme over for-loops.
Although I will state that for-loops do allow the user to be a little more intimate with the function call and I do encourage everyone to become efficient at loops :)</description>
    </item>
    
  </channel>
</rss>